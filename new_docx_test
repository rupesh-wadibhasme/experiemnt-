import unittest
import textwrap
from pathlib import Path

from chatbot import TextExtractorDOCX, FileObject, TextChunk

class TestTextExtractorDOCX(unittest.TestCase):
    def setUp(self):
        self.sample_path = Path(__file__).parent / "test_files" / "sample_file.docx"
        self.file = FileObject(url=str(self.sample_path))
        self.extractor = TextExtractorDOCX()

    def test_exact_text_extraction(self):
        # 1) The supports guard:
        self.assertTrue(self.extractor.supports(self.file.url))

        # 2) Call the extractor itself:
        chunks = self.extractor(self.file)
        self.assertIsInstance(chunks, list)

        # 3) Combine into one string:
        extracted = "\n\n".join(chunk.text for chunk in chunks).strip()

        # 4) Define expected (dedented to avoid indent issues):
        expected = textwrap.dedent("""
            ## Key concepts and entities

            The FIS Risk Trade Store service provides a store of AA-format trades supporting multiple versions and audit history of each change. It also supports back-datesâ€¦
        """).strip()

        # 5) Compare:
        self.assertEqual(extracted, expected)

if __name__ == "__main__":
    unittest.main()
