import re
from docx import Document as DocxDocument
from typing import List
from .types import TextChunk

class TextExtractorDOCX(TextExtractor):
    """
    Extracts text from .docx (Word) files in one chunk,
    preserving headings and basic formatting (bold/italic),
    and returns a TextChunk for downstream indexing.
    """

    def supports(self, url: str) -> bool:
        return url.lower().endswith(".docx")

    def extract(self, file: FileObject) -> List[TextChunk]:
        def load(path: str) -> List[TextChunk]:
            doc = DocxDocument(path)
            lines = []

            def _build_runs(runs) -> str:
                segments = []
                for run in runs:
                    text_segment = run.text
                    if run.bold and run.italic:
                        text_segment = f"***{text_segment}***"
                    elif run.bold:
                        text_segment = f"**{text_segment}**"
                    elif run.italic:
                        text_segment = f"*{text_segment}*"
                    segments.append(text_segment)
                return "".join(segments)

            def _get_heading_level(style_name: str) -> int:
                match = re.search(r"(\d+)$", style_name)
                return int(match.group(1)) if match else 1

            for para in doc.paragraphs:
                content = _build_runs(para.runs)
                style_name = para.style.name

                if style_name.lower().startswith("heading"):
                    level = min(_get_heading_level(style_name), 6)
                    line = f"{'#' * level} {content.strip()}"
                else:
                    line = content.strip()

                lines.append(line)

            markdown_text = "\n\n".join(lines)
            return [TextChunk(markdown_text, file.url, file.name)]

        return self._extract(file, load)
