flowchart TD
    %% ── Custom styles ──────────────────────────────────────────
    classDef artifact fill:#e1f0ff,stroke:#3778c2,stroke-width:2px;
    classDef decision fill:#fff5cc,stroke:#d6b656,stroke-width:2px;
    classDef result   fill:#e2f7e1,stroke:#4a7a4c,stroke-width:2px;

    %% ── External store (cloud) ────────────────────────────────
    AR(["☁ Artifact Repo"]):::artifact

    %% ── Ingest ────────────────────────────────────────────────
    start([Start]) --> load["Load Deal Data\n(single FX deal)"]
    load --> select["Select Required Columns"]

    %% ── Feature Engineering block ────────────────────────────
    subgraph FE["Feature Engineering"]
        direction TB
        select --> fe1["Compute Is_weekend_date"]
        fe1 --> fe2["Compute TDays"]
        fe2 --> fe3["Compute FaceValue"]
    end
    fe3 --> cast["Type-cast & Fill NA"]

    %% ── Artifact retrieval ───────────────────────────────────
    cast --> pull["Load Artifacts"]
    AR --> pull

    %% ── Business-logic gate ──────────────────────────────────
    pull --> check{"Business Logic\nChecks"}:::decision
    check -->|New combo| early["Early Anomaly\nExit"]:::result
    check -->|Known combo| tfStart

    %% ── Feature Transformation block ─────────────────────────
    subgraph FT["Feature Transformation"]
        direction TB
        tfStart["One-Hot Encode"] --> scale["Scale Numeric"]
        scale --> assemble["Assemble Blocks"]
    end
    assemble --> ae["AutoEncoder Prediction"]

    %% ── Deviation Analysis block ─────────────────────────────
    subgraph DA["Deviation Analysis"]
        direction TB
        ae --> recon["Reconstruct Features"]
        recon --> dev["Compute Deviations"]
        dev --> thresh{"Threshold\nExceeded?"}:::decision
    end

    thresh -->|No| normal["Return Normal Deal\n(JSON)"]:::result
    thresh -->|Yes| prep["Prepare LLM Input JSON"]

    %% ── LLM Explanation block ────────────────────────────────
    subgraph LLM["LLM Explanation"]
        direction TB
        prep --> prompt["Prompt LLM"]
        prompt --> reason["Generate Business-centric Reason"]
    end
    reason --> anomaly["Return Anomalous Deal\n(JSON)"]:::result
