below is payload details 

1. model will be deployed on databricks and its will be POST method. All operations are bundled in single end point with version V1  

2. 
payload_example = {

 'Client': 'IX',
 'FX_Instrument_Type': 'FX_FORWARD',
 'BUnit': '2430',
 'Cpty': 'ICA',
 'PrimaryCurr': 'GBP',
 'BuyCurr': 'GBP',
 'SellCurr': 'USD',
 'BuyAmount': 99990.0,
 'SellAmount': 12000.0,
 'SpotRate': 0.65,
 'ForwardPoints': 1.101,
 'ActivationDate': datetime.strptime('2007-05-23',"%Y-%m-%d"),
 'MaturityDate': datetime.strptime('2007-05-23',"%Y-%m-%d")',

'ContLeg': 0,

'UniqueId': "109001"}

1.1
additional payload details 

payload_dict = {
  "Client": {
    "type": "string",
    "title": "Client Name",
    "description": "The name of the client involved in the FX deal.",
    "example": "IX",

     "required": true,


  },
  "FX_Instrument_Type": {
    "type": "string",
    "title": "Instrument Type",
    "description": "The type of financial instrument used in the FX deal.",
    "example": "FX_FORWARD",

    "required": true,
  },
  "BUnit": {
    "type": "string",
    "title": "Business Unit",
    "description": "The business unit responsible for the FX deal.",
    "example": "2430-IMP",

    "required": true,
  },
  "Cpty": {
    "type": "string",
    "title": "Counterparty",
    "description": "The counterparty involved in the FX deal.",
    "example": "ICAO",

    "required": true,
  },
  "PrimaryCurr": {
    "type": "string",
    "title": "Primary Currency",
    "description": "The primary currency involved in the FX deal.",
    "example": "GBP",

    "required": true,
  },
  "BuyCurr": {
    "type": "string",
    "title": "Buy Currency",
    "description": "The currency being bought in the FX deal.",
    "example": "GBP",

    "required": true,
  },
  "SellCurr": {
    "type": "string",
    "title": "Sell Currency",
    "description": "The currency being sold in the FX deal.",
    "example": "USD",

    "required": true,
  },
  "BuyAmount": {
    "type": "number",
    "title": "Buy Amount",
    "description": "The amount of the buy currency in the FX deal.",
    "example": 99990.0,

    "required": true,
  },
  "SellAmount": {
    "type": "number",
    "title": "Sell Amount",
    "description": "The amount of the sell currency in the FX deal.",
    "example": 12000.0,

    "required": true,
  },
  "SpotRate": {
    "type": "number",
    "title": "Spot Rate",
    "description": "The spot exchange rate for the FX deal.",
    "example": 0.65,

    "required": true,
  },
  "ForwardPoints": {
    "type": "number",
    "title": "Forward Points",
    "description": "The forward points added to the spot rate to determine the forward rate.",
    "example": 1.101,

    "required": true,
  },
  "ActivationDate": {
    "type": "date",
    "title": "Activation Date",
    "description": "The date when the FX deal becomes active.",
    "example": "2025-07-01",

    "required": true,
  },
  "MaturityDate": {
    "type": "date",
    "title": "Maturity Date",
    "description": "The date when the FX deal matures.",
    "example": "2025-12-31",

    "required": true,
  },

'UniqueId': {

  "type": int,
    "title": "Contract Number",
    "description": "The unique ID for the FX deals.",
    "example": "109001",

    "required": true,
},

'ContLeg':{

"type":int,

"title":'Contract leg',

"description":'Near or far contract leg for transaction type',

"example":0,

"required":False(optional)

}

3. 
Example for success response

response = {

"Anomaly": 'Yes/No',

"Reason": "Reason for anomaly in 500 Chars"                  
"UniqueId": "109001",

"Client": "IXOM",

}, 200


4. 
Example for failed response.

response = {

"error": "Error message"

}, 500

5. We have not decided anything on authentication. keep the placeholder
6. Yet to decide on rate limit to main API but get Azure OpenAI's rate limit and it will be applicable 
7. No need to mention any details of data preprocessing and prediction but its strictly required to provide input in predefined format otherwise request will be responded with error msg
8. Define some error msg for model prediction failure (all resons in single msg)
9. Define some suitable response for LLM failure
10. average response time for 	feature engg- 0.0032097	scaling and transformation- 0.007378	LLM-0.3015867. I am not sure of timeout logic just yet
11. Define something standard on error for failed  

