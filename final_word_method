import os
import re
from typing import List
from docx import Document
from .types import TextChunk  # Update this import path based on where TextChunk is defined

import re
from docx import Document
from typing import List

class TextExtractorDOCX(TextExtractor):
    def supports(self, url: str) -> bool:
        return url.lower().endswith(".docx")

    def extract(self, file: FileObject) -> List[TextChunk]:
        def load(path: str) -> List[TextChunk]:
            doc = Document(path)
            lines: List[str] = []

            def get_content(runs) -> str:
                segments = []
                for run in runs:
                    seg = run.text
                    if run.bold:
                        seg = f"**{seg}**"
                    if run.italic:
                        seg = f"*{seg}*"
                    segments.append(seg)
                return "".join(segments)

            def get_heading_level(style_name: str) -> int:
                m = re.search(r"Heading\s+(\d+)\b", style_name, re.IGNORECASE)
                return int(m.group(1)) if m else 1

            for paragraph in doc.paragraphs:
                txt = get_content(paragraph.runs).strip()
                style = para.style.name or ""

                if style.lower().startswith("heading"):
                    lvl = min(get_heading_level(style), 6)
                    lines.append(f"{'#' * lvl} {txt}")
                else:
                    if txt:
                        lines.append(txt)

            markdown = "\n\n".join(lines)
            return [TextChunk(text=markdown, url=file.url, filename=file.name)]

        return load(file.url)

    def __call__(self, file: FileObject) -> List[TextChunk]:
        if not self.supports(file.url):
            raise ValueError(f"Unsupported file type: {file.url}")
        return self.extract(file)
