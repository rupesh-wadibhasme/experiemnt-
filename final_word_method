import os
from typing import List
from docx import Document
import re

class TextExtractorDOCX(TextExtractor):
    """
    Extracts text from .docx (Word) files in one chunk,
    preserving headings and basic formatting (bold/italic).
    """

    def supports(self, url: str) -> bool:
        """
        Check if the file has a .docx extension.
        """
        return url.lower().endswith(".docx")

    def extract(self, file: FileObject) -> List[str]:
        """
        Extract content from the DOCX file and return it as a single Markdown-like string.
        """
        doc = Document(file.url)
        lines = []

        for para in doc.paragraphs:
            content = self._build_runs(para.runs)
            style_name = para.style.name

            if style_name.lower().startswith("heading"):
                level = self._get_heading_level(style_name)
                level = min(level, 6)
                line = f"{'#' * level} {content.strip()}"
            else:
                line = content.strip()

            lines.append(line)

        markdown_text = "\n\n".join(lines)
        return [markdown_text]  # Return as a list of one "chunk"

    @staticmethod
    def _build_runs(runs) -> str:
        """
        Preserve basic formatting (bold/italic) in Markdown style.
        """
        segments = []
        for run in runs:
            text_segment = run.text
            if run.bold and run.italic:
                text_segment = f"***{text_segment}***"
            elif run.bold:
                text_segment = f"**{text_segment}**"
            elif run.italic:
                text_segment = f"*{text_segment}*"
            segments.append(text_segment)
        return "".join(segments)

    @staticmethod
    def _get_heading_level(style_name: str) -> int:
        """
        Extracts heading level number from 'Heading 1', 'Heading 2', etc.
        """
        match = re.search(r"(\d+)$", style_name)
        return int(match.group(1)) if match else 1
