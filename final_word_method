import os
import re
from typing import List
from docx import Document
from .types import TextChunk  # Update this import path based on where TextChunk is defined

import re
from docx import Document
from typing import List


class TextExtractorDOCX(TextExtractor):
    """Extracts text from .docx files in markdown format (with headings and run formatting) or as plain text."""
    def __init__(self, markdown: bool = True):
        # If markdown is True, headings and bold/italic runs are preserved in Markdown syntax.
        self.markdown = markdown

    def supports(self, url: str) -> bool:
        # Only process .docx files
        return url.lower().endswith('.docx')

    def extract(self, file: FileObject) -> List[TextChunk]:
        # The loader function that will be passed to the base class
        def load(path: str) -> List[TextChunk]:
            doc = DocxDocument(path)
            lines: List[str] = []

            def get_content(runs) -> str:
                segments = []
                for run in runs:
                    seg = run.text or ''
                    if self.markdown:
                        if run.bold:
                            seg = f"**{seg}**"
                        if run.italic:
                            seg = f"*{seg}*"
                    segments.append(seg)
                return ''.join(segments).strip()

            def get_heading_level(style_name: str) -> int:
                # Extract the level from style names like "Heading 1"
                match = re.search(r"Heading\s*(\d+)", style_name, re.IGNORECASE)
                return int(match.group(1)) if match else 1

            for paragraph in doc.paragraphs:
                content = get_content(paragraph.runs)
                if not content:
                    continue

                style_name = (paragraph.style.name or '').lower()
                if self.markdown and style_name.startswith('heading'):
                    level = min(get_heading_level(paragraph.style.name), 6)
                    lines.append(f"{'#' * level} {content}")
                else:
                    lines.append(content)

            markdown_text = "\n\n".join(lines)
            # Create a single chunk for the whole document
            return [TextChunk(markdown_text, file.url, file.name)]

        # Delegate to the base TextExtractor's _extract, which handles URL dispatch
        return self._extract(file, load)
